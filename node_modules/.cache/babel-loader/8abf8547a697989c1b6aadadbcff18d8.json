{"ast":null,"code":"import _toConsumableArray from \"C:\\\\Users\\\\0lili\\\\OneDrive\\\\Escritorio\\\\Pract4_todoList\\\\uqwxd-react_labs\\\\todo_list\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/toConsumableArray\";\nimport _slicedToArray from \"C:\\\\Users\\\\0lili\\\\OneDrive\\\\Escritorio\\\\Pract4_todoList\\\\uqwxd-react_labs\\\\todo_list\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/slicedToArray\";\n\nvar _this = this,\n    _jsxFileName = \"C:\\\\Users\\\\0lili\\\\OneDrive\\\\Escritorio\\\\Pract4_todoList\\\\uqwxd-react_labs\\\\todo_list\\\\src\\\\App.js\";\n\nimport React, { useState, useEffect } from \"react\"; //Se importan React, useState y useEffect desde el módulo \"react\" para poder usar estados\n\nimport \"./App.css\";\nvar ThemeContext = React.createContext();\n\nvar App = function App() {\n  //A continuación se utilizan los hooks useState para definir dos estados\n  //El estado todos almacena la lista de tareas\n  var _useState = useState([]),\n      _useState2 = _slicedToArray(_useState, 2),\n      todos = _useState2[0],\n      setTodos = _useState2[1]; //El estado todoEditing almacena el ID de la tarea que se está editando actualmente\n\n\n  var _useState3 = useState(null),\n      _useState4 = _slicedToArray(_useState3, 2),\n      todoEditing = _useState4[0],\n      setTodoEditing = _useState4[1];\n\n  var _useState5 = useState(\"light\"),\n      _useState6 = _slicedToArray(_useState5, 2),\n      theme = _useState6[0],\n      setTheme = _useState6[1]; //El siguiente useEffect es para cargar las tareas almacenadas en el almacenamiento local cuando se monta el componente por primera vez\n\n\n  useEffect(function () {\n    var json = localStorage.getItem(\"todos\");\n    var loadedTodos = JSON.parse(json);\n\n    if (loadedTodos) {\n      setTodos(loadedTodos);\n    }\n  }, []); //El siguiente useEffect se utiliza para guardar las tareas en el almacenamiento local cada vez que el estado todos cambia\n\n  useEffect(function () {\n    if (todos.length > 0) {\n      var json = JSON.stringify(todos);\n      localStorage.setItem(\"todos\", json);\n    }\n  }, [todos]); // Add the handlesubmit code here\n\n  function handleSubmit(e) {\n    e.preventDefault(); //Evita que el formulario se envíe y la página se recargue\n\n    var todo = document.getElementById('todoAdd').value; //Se obtiene el valor del elemento de entrada del formulario con el id 'todoAdd' y lo asigna a la variable todo\n    //Se crea un nuevo objeto de tarea newTodo\n\n    var newTodo = {\n      id: new Date().getTime(),\n      //Se asigna un ID único utilizando new Date().getTime(), que devuelve el tiempo actual en milisegundos desde el 1 de enero de 1970\n      text: todo.trim(),\n      //Se asigna el valor de todo después de eliminar los espacios en blanco al inicio y al final utilizando trim()\n      completed: false //Se establece en false porque la tarea recién creada no está completada\n\n    }; //Esta condición verifica si el texto de la nueva tarea no está vacío\n\n    if (newTodo.text.length > 0) {\n      setTodos(_toConsumableArray(todos).concat(newTodo)); //Si la condición anterior se cumple, se utiliza el setter setTodos para actualizar el estado todos \n      //Se crea un nuevo array copiando todos los elementos de todos ([...todos]) y luego\n      // se concatena el nuevo objeto de tarea (newTodo) al final del array\n    } else {\n      alert(\"Enter Valid Task\"); //Si la condición no se cumple (es decir, el texto de la tarea está vacío), se muestra una alerta indicando al usuario que ingrese una tarea válida\n    }\n\n    document.getElementById('todoAdd').value = \"\"; //Se restablece el valor del campo de entrada del formulario con el id 'todoAdd' a una cadena vacía, lo que borra el texto que el usuario había ingresado previamente en el campo de entrada\n  } // Add the deleteToDo code here\n\n\n  function deleteTodo(id) {\n    //Esta línea define una función llamada deleteTodo que toma un argumento id, que representa el ID de la tarea que se desea eliminar\n    var updatedTodos = _toConsumableArray(todos).filter(function (todo) {\n      return todo.id !== id;\n    }); //se inicializa como una copia del estado todos, utilizando el operador de propagación (...todos)\n    //Luego se aplica el método filter() sobre este array para filtrar los elementos cuyo id no coincide con el id pasado como argumento a la función\n\n\n    setTodos(updatedTodos);\n  } // Add the toggleComplete code here\n  //Esta función toma el ID de la tarea que se desea marcar como completada o no completada\n\n\n  function toggleComplete(id) {\n    var updatedTodos = _toConsumableArray(todos).map(function (todo) {\n      //Se crea una nueva variable llamada updatedTodos, que se inicializa como una copia del estado todos, \n      //utilizando el operador de propagación (...todos). \n      //Luego, se utiliza el método map() sobre este array para iterar sobre cada tarea y devolver una nueva versión de cada tarea.\n      if (todo.id === id) {\n        todo.completed = !todo.completed;\n      }\n\n      return todo;\n    });\n\n    setTodos(updatedTodos);\n  } // Add the submitEdits code here\n\n\n  function submitEdits(newtodo) {\n    var updatedTodos = _toConsumableArray(todos).map(function (todo) {\n      //Se crea una nueva variable llamada updatedTodos, que se inicializa como una copia del estado todos, \n      //utilizando el operador de propagación (...todos). Luego, se utiliza el método map() sobre este array para iterar sobre cada tarea \n      //y devolver una nueva versión de cada tarea.\n      if (todo.id === newtodo.id) {\n        todo.text = document.getElementById(newtodo.id).value; // se verifica si el id de la tarea actual coincide con el id de la nueva tarea proporcionada como argumento.\n        // Si coinciden, significa que esta tarea debe ser editada.\n      }\n\n      return todo;\n    });\n\n    setTodos(updatedTodos); //se utiliza el setter setTodos para actualizar el estado todos con el nuevo array de tareas, donde la tarea editada ha sido modificada\n\n    setTodoEditing(null); //se llama a setTodoEditing para restablecer el estado todoEditing a null, lo que indica que ya no se está editando ninguna tarea\n  }\n\n  return /*#__PURE__*/React.createElement(ThemeContext.Provider, {\n    value: theme,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 86,\n      columnNumber: 7\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    id: \"todo-list\",\n    className: theme,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 87,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(\"button\", {\n    onClick: function onClick() {\n      return setTheme(theme === \"light\" ? \"dark\" : \"light\");\n    },\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 88,\n      columnNumber: 9\n    }\n  }, \"Cambiar tema\"), /*#__PURE__*/React.createElement(\"h1\", {\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 91,\n      columnNumber: 11\n    }\n  }, \"Todo List\"), /*#__PURE__*/React.createElement(\"form\", {\n    onSubmit: handleSubmit,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 92,\n      columnNumber: 11\n    }\n  }, /*#__PURE__*/React.createElement(\"input\", {\n    type: \"text\",\n    id: \"todoAdd\",\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 93,\n      columnNumber: 13\n    }\n  }), /*#__PURE__*/React.createElement(\"button\", {\n    type: \"submit\",\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 94,\n      columnNumber: 13\n    }\n  }, \"Add Todo\")), todos.map(function (todo) {\n    return /*#__PURE__*/React.createElement(\"div\", {\n      key: todo.id,\n      className: \"todo\",\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 97,\n        columnNumber: 13\n      }\n    }, /*#__PURE__*/React.createElement(\"div\", {\n      className: \"todo-text\",\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 98,\n        columnNumber: 15\n      }\n    }, /*#__PURE__*/React.createElement(\"input\", {\n      type: \"checkbox\",\n      id: \"completed\",\n      checked: todo.completed,\n      onChange: function onChange() {\n        return toggleComplete(todo.id);\n      },\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 99,\n        columnNumber: 17\n      }\n    }), todo.id === todoEditing ? /*#__PURE__*/React.createElement(\"input\", {\n      type: \"text\",\n      id: todo.id,\n      defaultValue: todo.text,\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 106,\n        columnNumber: 19\n      }\n    }) : /*#__PURE__*/React.createElement(\"div\", {\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 112,\n        columnNumber: 19\n      }\n    }, todo.text)), /*#__PURE__*/React.createElement(\"div\", {\n      className: \"todo-actions\",\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 115,\n        columnNumber: 15\n      }\n    }, todo.id === todoEditing ? /*#__PURE__*/React.createElement(\"button\", {\n      onClick: function onClick() {\n        return submitEdits(todo);\n      },\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 117,\n        columnNumber: 19\n      }\n    }, \"Submit Edits\") : /*#__PURE__*/React.createElement(\"button\", {\n      onClick: function onClick() {\n        return setTodoEditing(todo.id);\n      },\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 119,\n        columnNumber: 19\n      }\n    }, \"Edit\"), /*#__PURE__*/React.createElement(\"button\", {\n      onClick: function onClick() {\n        return deleteTodo(todo.id);\n      },\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 121,\n        columnNumber: 17\n      }\n    }, \"Delete\")));\n  })));\n};\n\nvar ThemeWrapper = function ThemeWrapper() {\n  return /*#__PURE__*/React.createElement(ThemeContext.Consumer, {\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 132,\n      columnNumber: 5\n    }\n  }, function (theme) {\n    return /*#__PURE__*/React.createElement(App, {\n      theme: theme,\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 133,\n        columnNumber: 19\n      }\n    });\n  });\n};\n\nexport default ThemeWrapper; //export default App;","map":{"version":3,"names":["React","useState","useEffect","ThemeContext","createContext","App","todos","setTodos","todoEditing","setTodoEditing","theme","setTheme","json","localStorage","getItem","loadedTodos","JSON","parse","length","stringify","setItem","handleSubmit","e","preventDefault","todo","document","getElementById","value","newTodo","id","Date","getTime","text","trim","completed","concat","alert","deleteTodo","updatedTodos","filter","toggleComplete","map","submitEdits","newtodo","ThemeWrapper"],"sources":["C:/Users/0lili/OneDrive/Escritorio/Pract4_todoList/uqwxd-react_labs/todo_list/src/App.js"],"sourcesContent":["import React, {useState,useEffect} from \"react\"; //Se importan React, useState y useEffect desde el módulo \"react\" para poder usar estados\r\nimport \"./App.css\";\r\n\r\nconst ThemeContext = React.createContext();\r\n\r\nconst App = () => {\r\n  //A continuación se utilizan los hooks useState para definir dos estados\r\n  //El estado todos almacena la lista de tareas\r\n  const [todos, setTodos] = useState([]);\r\n  //El estado todoEditing almacena el ID de la tarea que se está editando actualmente\r\n  const [todoEditing, setTodoEditing] = useState(null);\r\n  const [theme, setTheme] = useState(\"light\");\r\n  //El siguiente useEffect es para cargar las tareas almacenadas en el almacenamiento local cuando se monta el componente por primera vez\r\n  useEffect(() => {\r\n    const json = localStorage.getItem(\"todos\");\r\n    const loadedTodos = JSON.parse(json);\r\n    if (loadedTodos) {\r\n      setTodos(loadedTodos);\r\n    }\r\n  }, []);\r\n\r\n  //El siguiente useEffect se utiliza para guardar las tareas en el almacenamiento local cada vez que el estado todos cambia\r\n  useEffect(() => {\r\n    if(todos.length > 0) {\r\n        const json = JSON.stringify(todos);\r\n        localStorage.setItem(\"todos\", json);\r\n    }\r\n  }, [todos]);\r\n  \r\n  // Add the handlesubmit code here\r\n  function handleSubmit(e) {\r\n    e.preventDefault(); //Evita que el formulario se envíe y la página se recargue\r\n    let todo = document.getElementById('todoAdd').value //Se obtiene el valor del elemento de entrada del formulario con el id 'todoAdd' y lo asigna a la variable todo\r\n    //Se crea un nuevo objeto de tarea newTodo\r\n    const newTodo = {\r\n      id: new Date().getTime(), //Se asigna un ID único utilizando new Date().getTime(), que devuelve el tiempo actual en milisegundos desde el 1 de enero de 1970\r\n      text: todo.trim(), //Se asigna el valor de todo después de eliminar los espacios en blanco al inicio y al final utilizando trim()\r\n      completed: false, //Se establece en false porque la tarea recién creada no está completada\r\n    };\r\n    //Esta condición verifica si el texto de la nueva tarea no está vacío\r\n    if (newTodo.text.length > 0 ) {\r\n        setTodos([...todos].concat(newTodo)); //Si la condición anterior se cumple, se utiliza el setter setTodos para actualizar el estado todos \r\n        //Se crea un nuevo array copiando todos los elementos de todos ([...todos]) y luego\r\n        // se concatena el nuevo objeto de tarea (newTodo) al final del array\r\n    } else {\r\n        alert(\"Enter Valid Task\"); //Si la condición no se cumple (es decir, el texto de la tarea está vacío), se muestra una alerta indicando al usuario que ingrese una tarea válida\r\n    }\r\n    document.getElementById('todoAdd').value = \"\" //Se restablece el valor del campo de entrada del formulario con el id 'todoAdd' a una cadena vacía, lo que borra el texto que el usuario había ingresado previamente en el campo de entrada\r\n  }\r\n  // Add the deleteToDo code here\r\n  function deleteTodo(id) { //Esta línea define una función llamada deleteTodo que toma un argumento id, que representa el ID de la tarea que se desea eliminar\r\n    let updatedTodos = [...todos].filter((todo) => todo.id !== id); //se inicializa como una copia del estado todos, utilizando el operador de propagación (...todos)\r\n    //Luego se aplica el método filter() sobre este array para filtrar los elementos cuyo id no coincide con el id pasado como argumento a la función\r\n    setTodos(updatedTodos);\r\n  }\r\n  // Add the toggleComplete code here\r\n  //Esta función toma el ID de la tarea que se desea marcar como completada o no completada\r\n  function toggleComplete(id) { \r\n    let updatedTodos = [...todos].map((todo) => { //Se crea una nueva variable llamada updatedTodos, que se inicializa como una copia del estado todos, \r\n      //utilizando el operador de propagación (...todos). \r\n      //Luego, se utiliza el método map() sobre este array para iterar sobre cada tarea y devolver una nueva versión de cada tarea.\r\n      if (todo.id === id) {\r\n        todo.completed = !todo.completed;\r\n      }\r\n      return todo;\r\n    });\r\n    setTodos(updatedTodos);\r\n  }\r\n  // Add the submitEdits code here\r\n  function submitEdits(newtodo) {\r\n    const updatedTodos = [...todos].map((todo) => { //Se crea una nueva variable llamada updatedTodos, que se inicializa como una copia del estado todos, \r\n      //utilizando el operador de propagación (...todos). Luego, se utiliza el método map() sobre este array para iterar sobre cada tarea \r\n      //y devolver una nueva versión de cada tarea.\r\n      if (todo.id === newtodo.id) {\r\n        todo.text = document.getElementById(newtodo.id).value; // se verifica si el id de la tarea actual coincide con el id de la nueva tarea proporcionada como argumento.\r\n        // Si coinciden, significa que esta tarea debe ser editada.\r\n        }\r\n        return todo;\r\n      });\r\n      setTodos(updatedTodos); //se utiliza el setter setTodos para actualizar el estado todos con el nuevo array de tareas, donde la tarea editada ha sido modificada\r\n\r\n      setTodoEditing(null); //se llama a setTodoEditing para restablecer el estado todoEditing a null, lo que indica que ya no se está editando ninguna tarea\r\n    }\r\n  \r\n    return (\r\n      <ThemeContext.Provider value={theme}>\r\n        <div id=\"todo-list\" className={theme}>\r\n        <button onClick={() => setTheme(theme === \"light\" ? \"dark\" : \"light\")}>\r\n            Cambiar tema\r\n          </button>\r\n          <h1>Todo List</h1>\r\n          <form onSubmit={handleSubmit}>\r\n            <input type=\"text\" id=\"todoAdd\" />\r\n            <button type=\"submit\">Add Todo</button>\r\n          </form>\r\n          {todos.map((todo) => (\r\n            <div key={todo.id} className=\"todo\">\r\n              <div className=\"todo-text\">\r\n                <input\r\n                  type=\"checkbox\"\r\n                  id=\"completed\"\r\n                  checked={todo.completed}\r\n                  onChange={() => toggleComplete(todo.id)}\r\n                />\r\n                {todo.id === todoEditing ? (\r\n                  <input\r\n                    type=\"text\"\r\n                    id={todo.id}\r\n                    defaultValue={todo.text}\r\n                  />\r\n                ) : (\r\n                  <div>{todo.text}</div>\r\n                )}\r\n              </div>\r\n              <div className=\"todo-actions\">\r\n                {todo.id === todoEditing ? (\r\n                  <button onClick={() => submitEdits(todo)}>Submit Edits</button>\r\n                ) : (\r\n                  <button onClick={() => setTodoEditing(todo.id)}>Edit</button>\r\n                )}\r\n                <button onClick={() => deleteTodo(todo.id)}>Delete</button>\r\n              </div>\r\n            </div>\r\n          ))}\r\n        </div>\r\n      </ThemeContext.Provider>\r\n    );\r\n};\r\n\r\nconst ThemeWrapper = () => {\r\n  return (\r\n    <ThemeContext.Consumer>\r\n      {(theme) => <App theme={theme} />}\r\n    </ThemeContext.Consumer>\r\n  );\r\n};\r\n\r\nexport default ThemeWrapper;\r\n//export default App;\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}